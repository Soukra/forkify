var _modelJs = require('./model.js');
var _viewsRecipeViewJs = require('./views/recipeView.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _viewsRecipeViewJsDefault = _parcelHelpers.interopDefault(_viewsRecipeViewJs);
require('core-js/stable');
require('regenerator-runtime/runtime');
// polyfill everything else
const recipeContainer = document.querySelector('.recipe');
// https://forkify-api.herokuapp.com/v2
// /////////////////////////////////////
const controlRecipes = async function () {
  // async kw makes a function asynchronous -> async -> try{ await fetch() } catch {}
  try {
    // hash URI -> /#5ed6604591c37cdc054bc886
    const id = window.location.hash.slice(1);
    // takes the hash uri from url from window global{} without #
    console.log(id);
    // 5ed6604591c37cdc054bc90b
    if (!id) return;
    _viewsRecipeViewJsDefault.default.renderSpinner(recipeContainer);
    // run spinner function while fetching data and consuming promises
    // 1) Load recipe and store it in model.state.recipe{}
    // ALL ASYNC FUNCTIONS RETURN PROMISES -> AWAIT ALL PROMISES -> HANDLE ALL PROMISES
    await _modelJs.loadRecipe(id);
    // model.loadRecipe(id) doesnt return any value, only manipulates model.state.recipe{}
    // 2) Render recipe -> by passing model.state.recipe{} with fetched data
    _viewsRecipeViewJsDefault.default.render(_modelJs.state.recipe);
  } catch (err) {
    alert(err);
  }
};
const init = function () {
  _viewsRecipeViewJsDefault.default.addHandlerRender(controlRecipes);
};
init();
