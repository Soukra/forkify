var _urlImgIconsSvg = require('url:../img/icons.svg');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _urlImgIconsSvgDefault = _parcelHelpers.interopDefault(_urlImgIconsSvg);
require('core-js/stable');
require('regenerator-runtime/runtime');
// polyfill everything else
const recipeContainer = document.querySelector('.recipe');
const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};
// https://forkify-api.herokuapp.com/v2
// /////////////////////////////////////
const renderSpinner = function (parentEl) {
  // Function that inserts html with spinning infinite loop animation w/ css
  const markup = `
    <div class="spinner">
      <svg>
        <use href="${_urlImgIconsSvgDefault.default}#icon-loader"></use>
      </svg>
    </div>
  `;
  parentEl.innerHTML = '';
  parentEl.insertAdjacentHTML('afterbegin', markup);
};
const showRecipe = async function () {
  // async kw makes a function asynchronous -> async -> try{ await fetch() } catch {}
  try {
    // hash URI -> /#5ed6604591c37cdc054bc886
    const id = window.location.hash.slice(1);
    // takes the hash uri from url from window global{} without #
    console.log(id);
    // 5ed6604591c37cdc054bc90b
    // 1) Loading recipe
    renderSpinner(recipeContainer);
    // run spinner function while fetching data and consuming promises
    const res = await fetch(`https://forkify-api.herokuapp.com/api/v2/recipes/${id}`);
    // returns promise to handle
    const data = await res.json();
    // .json() returns another promise -> ALWATS AWAIT ALL PROMISES
    if (!res.ok) throw new Error(`${data.message} (${res.status})`);
    let {recipe} = data.data;
    recipe = {
      id: recipe.id,
      title: recipe.title,
      publisher: recipe.publisher,
      sourceUrl: recipe.source_url,
      image: recipe.image_url,
      servings: recipe.servings,
      cookingTime: recipe.cooking_time,
      ingredients: recipe.ingredients
    };
    console.log(recipe);
    // 2) Rendering recipe
    const markup = `
      <figure class="recipe__fig">
        <img src="${recipe.image}" alt="${recipe.title}" class="recipe__img" />
        <h1 class="recipe__title">
          <span>${recipe.title}</span>
        </h1>
      </figure>

      <div class="recipe__details">
        <div class="recipe__info">
          <svg class="recipe__info-icon">
            <use href="${_urlImgIconsSvgDefault.default}#icon-clock"></use>
          </svg>
          <span class="recipe__info-data recipe__info-data--minutes">${recipe.cookingTime}</span>
          <span class="recipe__info-text">minutes</span>
        </div>
        <div class="recipe__info">
          <svg class="recipe__info-icon">
            <use href="${_urlImgIconsSvgDefault.default}#icon-users"></use>
          </svg>
          <span class="recipe__info-data recipe__info-data--people">${recipe.servings}</span>
          <span class="recipe__info-text">servings</span>

          <div class="recipe__info-buttons">
            <button class="btn--tiny btn--increase-servings">
              <svg>
                <use href="${_urlImgIconsSvgDefault.default}#icon-minus-circle"></use>
              </svg>
            </button>
            <button class="btn--tiny btn--increase-servings">
              <svg>
                <use href="${_urlImgIconsSvgDefault.default}#icon-plus-circle"></use>
              </svg>
            </button>
          </div>
        </div>

        <div class="recipe__user-generated">
          <svg>
            <use href="${_urlImgIconsSvgDefault.default}#icon-user"></use>
          </svg>
        </div>
        <button class="btn--round">
          <svg class="">
            <use href="${_urlImgIconsSvgDefault.default}#icon-bookmark-fill"></use>
          </svg>
        </button>
      </div>

      <div class="recipe__ingredients">
        <h2 class="heading--2">Recipe ingredients</h2>
        <ul class="recipe__ingredient-list">
          ${recipe.ingredients.map(ing => {
      // loop over ingredients[] and for each return a `html` then return an array of `html`s
      return `
              <li class="recipe__ingredient">
                <svg class="recipe__icon">
                  <use href="${_urlImgIconsSvgDefault.default}#icon-check"></use>
                </svg>
                <div class="recipe__quantity">${ing.quantity}</div>
                <div class="recipe__description">
                  <span class="recipe__unit">${ing.unit}</span>
                  ${ing.description}
                </div>
              </li>
            `;
    }).join('')}
        </ul>
      </div>
      <div class="recipe__directions">
        <h2 class="heading--2">How to cook it</h2>
        <p class="recipe__directions-text">
          This recipe was carefully designed and tested by
          <span class="recipe__publisher">${recipe.publisher}</span>. Please check out
          directions at their website.
        </p>
        <a
          class="btn--small recipe__btn"
          href="${recipe.sourceUrl}"
          target="_blank"
        >
          <span>Directions</span>
          <svg class="search__icon">
            <use href="${_urlImgIconsSvgDefault.default}#icon-arrow-right"></use>
          </svg>
        </a>
      </div>
    `;
    // 2.2) Inserting markup in parent element -> recipeCOntainer -> .recipe
    recipeContainer.innerHTML = '';
    // emptying to then fill up again
    recipeContainer.insertAdjacentHTML('afterbegin', markup);
  } catch (err) {
    alert(err);
  }
};
window.addEventListener('hashchange', showRecipe);
